// Generated by CoffeeScript 1.5.0
var $;

$ = jQuery;

$.fn.extend({
  validate: function(options) {
    var log, settings;
    settings = {
      debug: false,
      onKeyupValidationSuccess: function(elem, messages) {
        return log(messages);
      },
      onKeyupValidationError: function(elem, messages) {
        return log(messages);
      },
      onBlurValidationSuccess: function(elem, messages) {
        return console.log('blur succ!');
      },
      onBlurValidationError: function(elem, messages) {
        return console.log('blur err!');
      },
      onEmpty: function(elem) {
        return console.log('emptied');
      },
      valrules: {
        fullname: {
          valfun: function(str) {
            var exp;
            exp = /^[a-zA-ZàáâäãåèéêëìíîïòóôöõøùúûüÿýñçčšžÀÁÂÄÃÅÈÉÊËÌÍÎÏÒÓÔÖÕØÙÚÛÜŸÝÑßÇŒÆČŠŽ∂ð ,.'-]+$/;
            if (str.match(exp) != null) {
              return true;
            } else {
              return false;
            }
          },
          successmsg: 'We got a full name! Awesome!',
          errormsg: 'You have to provide a full name, asshole!'
        },
        required: {
          valfun: function(str) {
            if (str.length < 1) {
              return false;
            } else {
              return true;
            }
          },
          successmsg: 'You were right, this is fuckin required',
          errormsg: 'You have to fill this, man!'
        }
      },
      validateOnKeyup: false,
      validateOnBlur: true,
      validateOnSubmit: true
    };
    settings = $.extend(settings, options);
    log = function(msg) {
      if (settings.debug) {
        return typeof console !== "undefined" && console !== null ? console.log(msg) : void 0;
      }
    };
    return this.each(function() {
      var applyRules, failedFuncs, watchForm;
      watchForm = function(elem) {
        var minval, valrules;
        valrules = elem.data('valrules');
        if (valrules != null) {
          valrules = elem.data('valrules').split(' ');
          if (settings.validateOnKeyup) {
            minval = elem.data('minval');
            elem.on('keyup', function(e) {
              if (elem.val() === '') {
                return settings.onEmpty(elem);
              } else {
                if (e.which === 13 || e.which === 16) {
                  return e.preventDefault();
                } else {
                  if (minval != null) {
                    if (elem.val().length >= parseInt(minval)) {
                      return applyRules(elem, valrules, 'onKeyupValidation');
                    }
                  } else {
                    return applyRules(elem, valrules, 'onKeyupValidation');
                  }
                }
              }
            });
          }
          if (settings.validateOnBlur) {
            return elem.on('blur', function(e) {
              if (elem.val() !== '') {
                return applyRules(elem, valrules, 'onBlurValidation');
              } else {
                return settings.onEmpty(elem);
              }
            });
          }
        }
      };
      applyRules = function(elem, valrules, eventFunc) {
        var messages;
        valrules = valrules.map(function(valrule) {
          return settings.valrules[valrule];
        });
        messages = failedFuncs(valrules, elem);
        if (messages.failed.length === 0) {
          return settings[eventFunc + 'Success'](elem, messages);
        } else {
          return settings[eventFunc + 'Error'](elem, messages);
        }
      };
      failedFuncs = function(valrules, elem) {
        var messages, valrule, _i, _len;
        messages = {
          success: [],
          failed: []
        };
        for (_i = 0, _len = valrules.length; _i < _len; _i++) {
          valrule = valrules[_i];
          if (valrule.valfun(elem.val(), elem) === false) {
            messages.failed.push(valrule.errormsg);
          } else {
            messages.success.push(valrule.successmsg);
          }
        }
        return messages;
      };
      log("Preparing magic show.");
      return $(this).find('input, select, textarea').each(function(i) {
        return watchForm($(this));
      });
    });
  }
});
