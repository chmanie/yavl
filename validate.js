// Generated by CoffeeScript 1.5.0
var $;

$ = jQuery;

$.fn.extend({
  validate: function(options) {
    var log, settings;
    settings = {
      debug: false,
      onKeyupValidationSuccess: function(elem, valrule) {},
      onKeyupValidationError: function(elem, valrule) {},
      onBlurValidationSuccess: function(elem, valrule) {
        return console.log('blur succ!');
      },
      onBlurValidationError: function(elem, valrule) {
        return console.log('blur err!');
      },
      onEmpty: function(elem) {
        return console.log('emptied');
      },
      valrules: {
        fullname: {
          valfun: function(str) {
            var exp;
            exp = /^[a-zA-ZÖÜÄßöüäøñ]{2,}(\s[a-zA-ZÖÜÄßöüäøñ]{2,}){1,3}$/;
            if (str.match(exp) !== null) {
              return true;
            } else {
              return false;
            }
          },
          successmsg: 'We got a full name! Awesome!',
          errormsg: 'You have to provide a full name, asshole!'
        },
        required: {
          valfun: function(str) {
            if (str.length < 1) {
              return false;
            } else {
              return true;
            }
          },
          successmsg: 'You were right, this is fuckin required',
          errormsg: 'You have to fill this, man!'
        }
      },
      validateOnKeyUp: false,
      validateOnBlur: true,
      validateOnSubmit: true
    };
    settings = $.extend(settings, options);
    log = function(msg) {
      if (settings.debug) {
        return typeof console !== "undefined" && console !== null ? console.log(msg) : void 0;
      }
    };
    return this.each(function() {
      var applyRules, failedFuncs, watchForm;
      watchForm = function(elem) {
        var minval, valrules;
        valrules = elem.data('valrules');
        if (valrules != null) {
          valrules = elem.data('valrules').split(' ');
          if (settings.validateOnKeyUp) {
            minval = elem.data('minval');
            elem.on('keyup', function(e) {
              if (elem.val() === '') {
                return settings.onEmpty(elem);
              } else {
                if (e.which === 13) {
                  return e.preventDefault();
                } else {
                  if (minval != null) {
                    if (elem.val().length >= parseInt(minval)) {
                      return applyRules(elem, valrules, 'onKeyupValidation');
                    }
                  } else {
                    return applyRules(elem, valrules, 'onKeyupValidation');
                  }
                }
              }
            });
          }
          if (settings.validateOnBlur) {
            return elem.on('blur', function(e) {
              console.log('blur fired');
              if (elem.val() !== '') {
                return applyRules(elem, valrules, 'onBlurValidation');
              }
            });
          }
        }
      };
      applyRules = function(elem, valrules, eventFunc) {
        var failed;
        valrules = valrules.map(function(valrule) {
          return settings.valrules[valrule];
        });
        failed = failedFuncs(valrules, elem.val());
        if (failed.length === 0) {
          return settings[eventFunc + 'Success'](elem, valrules);
        } else {
          return settings[eventFunc + 'Error'](elem, failed);
        }
      };
      failedFuncs = function(valrules, param) {
        var failed, valrule, _i, _len;
        failed = [];
        for (_i = 0, _len = valrules.length; _i < _len; _i++) {
          valrule = valrules[_i];
          if (valrule.valfun(param) === false) {
            failed.push(valrule);
          }
        }
        console.log(failed);
        return failed;
      };
      log("Preparing magic show.");
      return $(this).find('input, select, textarea').each(function(i) {
        return watchForm($(this));
      });
    });
  }
});
