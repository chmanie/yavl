// Generated by CoffeeScript 1.5.0
var $, constraints, isInObj;

$ = jQuery;

$.fn.extend({
  validate: function(options) {
    var log, settings, validationObj;
    settings = {
      debug: false,
      onKeyupValidationSuccess: function(elem, messages) {
        return log(messages);
      },
      onKeyupValidationError: function(elem, messages) {
        return log(messages);
      },
      onBlurValidationSuccess: function(elem, messages) {
        return console.log('blur succ!');
      },
      onBlurValidationError: function(elem, messages) {
        return console.log('blur err!');
      },
      onEmpty: function(elem) {
        return console.log('emptied');
      },
      validateOnKeyUp: true,
      validateOnBlur: true,
      validateOnSubmit: true
    };
    settings = $.extend(settings, options);
    log = function(msg) {
      if (settings.debug) {
        return typeof console !== "undefined" && console !== null ? console.log(msg) : void 0;
      }
    };
    validationObj = (function() {

      function validationObj(elem) {
        this.elem = elem;
        this.data = this.elem.data();
        this.valFuncs = this.parseValFuncs();
        this.minval = this.elem.data('minval') != null ? this.elem.data('minval') : 0;
        if (settings.validateOnKeyUp) {
          this.startKeyUpValidation();
        }
        if (settings.validateOnBlur) {
          this.startBlurValidation();
        }
        if (settings.validateOnSubmit) {
          this.startSubmitValidation();
        }
        log(this.valFuncs);
        log(this.minval);
      }

      validationObj.prototype.parseValFuncs = function() {
        var errexp, errfunc, func, message, succexp, succfunc, val, valFuncs, _ref, _ref1;
        valFuncs = {};
        _ref = this.data;
        for (func in _ref) {
          val = _ref[func];
          if (isInObj(func, constraints)) {
            valFuncs[func] = constraints[func](val);
          }
        }
        errexp = /^(.*)Errormsg$/;
        succexp = /^(.*)Successmsg$/;
        _ref1 = this.data;
        for (message in _ref1) {
          val = _ref1[message];
          errfunc = message.match(errexp);
          succfunc = message.match(succexp);
          if (errfunc != null) {
            if (errfunc[1] != null) {
              valFuncs[errfunc[1]].errormsg = val;
            }
          }
          if (succfunc != null) {
            if (succfunc[1] != null) {
              valFuncs[succfunc[1]].successmsg = val;
            }
          }
        }
        return valFuncs;
      };

      validationObj.prototype.startKeyUpValidation = function() {
        var valObj;
        valObj = this;
        return this.elem.on('keyup', function(e) {
          if (valObj.elem.val() === '') {
            return settings.onEmpty(valObj.elem);
          } else {
            if (e.which === 13 || e.which === 16) {
              return e.preventDefault();
            } else {
              if (typeof minval !== "undefined" && minval !== null) {
                if (valObj.elem.val().length >= parseInt(minval)) {
                  return valObj.applyRules('onKeyupValidation');
                }
              } else {
                return valObj.applyRules('onKeyupValidation');
              }
            }
          }
        });
      };

      validationObj.prototype.startBlurValidation = function() {
        var valObj;
        valObj = this;
        return this.elem.on('blur', function(e) {
          if (valObj.elem.val() !== '') {
            return valObj.applyRules('onBlurValidation');
          } else {
            return settings.onEmpty(valObj.elem);
          }
        });
      };

      validationObj.prototype.startSubmitValidation = function() {
        return console.log('submit validation stuff goes here');
      };

      validationObj.prototype.applyRules = function(eventFunc) {
        var funcName, funcObj, messages, _ref;
        messages = {
          success: [],
          failed: []
        };
        _ref = this.valFuncs;
        for (funcName in _ref) {
          funcObj = _ref[funcName];
          if (funcObj.valfun(this.elem.val()) === false) {
            messages.failed.push(funcObj.errormsg);
          } else {
            messages.success.push(funcObj.successmsg);
          }
        }
        if (messages.failed.length === 0) {
          return settings[eventFunc + 'Success'](this.elem, messages);
        } else {
          return settings[eventFunc + 'Error'](this.elem, messages);
        }
      };

      return validationObj;

    })();
    return this.each(function() {
      return $(this).find('input, select, textarea').each(function(i) {
        return new validationObj($(this));
      });
    });
  }
});

isInObj = function(aKey, obj) {
  var key, val;
  for (key in obj) {
    val = obj[key];
    if (key === aKey) {
      return true;
    }
  }
  return false;
};

constraints = {
  required: function() {
    return {
      valfun: function(str) {
        if (str.length >= 1) {
          return true;
        } else {
          return false;
        }
      },
      successmsg: 'You were right, this is fuckin required',
      errormsg: 'You have to fill this, man!'
    };
  },
  minlength: function(ml) {
    return {
      valfun: function(str) {
        if (str.length >= parseInt(ml)) {
          return true;
        } else {
          return false;
        }
      },
      successmsg: 'Yeah!',
      errormsg: 'Sorry, minimal length is ' + ml + ' characters'
    };
  },
  regexp: function(exp) {
    return {
      valfun: function(str) {
        if (str.match(exp) != null) {
          return true;
        } else {
          return false;
        }
      },
      successmsg: 'Great!',
      errormsg: 'Something is wrong!'
    };
  }
};
